type Result_1 = 
 variant {
   err: Error;
   ok: DoapEvent;
 };
type Result = 
 variant {
   err: Error;
   ok: bool;
 };
type Error = 
 variant {
   NotAuthorized;
   alreadyExists;
   notFound;
 };
type DoapEvent = 
 record {
   active: bool;
   dateCreated: int;
   dateEnding: int;
   description: text;
   eventType: ClaimOptions;
   image: text;
   name: text;
   owner: principal;
   timePeriod: int;
   uid: text;
   url: text;
 };
type ClaimOptions__1 = 
 variant {
   open;
   secret;
   timelock;
   timelockAndSecret;
 };
type ClaimOptions = 
 variant {
   open;
   secret;
   timelock;
   timelockAndSecret;
 };
service : {
  createEvent: (text, ClaimOptions__1, text, text, text, int, text) ->
   (Result_1);
  endEvent: (text) -> (Result_1);
  getDirectEvent: (text) -> (opt DoapEvent) query;
  getEvent: (text) -> (Result_1) query;
  getEvents: () -> (vec record {
                          text;
                          DoapEvent;
                        }) query;
  getEventsCount: () -> (nat) query;
  isEventActive: (text) -> (Result);
}
